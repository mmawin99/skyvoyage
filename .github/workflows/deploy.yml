name: Deploy to Vercel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check_commit:
    runs-on: ubuntu-latest
    outputs:
      frontend_deploy: ${{ steps.check_message.outputs.frontend }}
      backend_deploy: ${{ steps.check_message.outputs.backend }}
      skip_deploy: ${{ steps.check_message.outputs.skip }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check commit message for deploy flags
        id: check_message
        run: |
          MESSAGE="$(git log -1 --pretty=%B)"
          if [[ "$MESSAGE" == *"--nda"* ]]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "frontend=false" >> "$GITHUB_OUTPUT"
            echo "backend=false" >> "$GITHUB_OUTPUT"
          elif [[ "$MESSAGE" == *"--ndf"* ]]; then
            echo "skip=false" >> "$GITHUB_OUTPUT"
            echo "frontend=false" >> "$GITHUB_OUTPUT"
            echo "backend=true" >> "$GITHUB_OUTPUT"
          elif [[ "$MESSAGE" == *"--ndb"* ]]; then
            echo "skip=false" >> "$GITHUB_OUTPUT"
            echo "frontend=true" >> "$GITHUB_OUTPUT"
            echo "backend=false" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
            echo "frontend=true" >> "$GITHUB_OUTPUT"
            echo "backend=true" >> "$GITHUB_OUTPUT"
          fi

  notify_skip:
    needs: check_commit
    if: needs.check_commit.outputs.skip_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Send Notification to ntfy.sh (Deploy Skipped)
        run: |
          curl -X POST "${{ secrets.NTFY_URL }}" \
            -H "Title: ⛔ Deploy Skipped" \
            -H "Tags: info" \
            -d "Deploy skipped due to commit message. Commit: ${{ github.event.head_commit.message }} by ${{ github.event.head_commit.author.name }}"

      - name: Send Notification to Discord (Deploy Skipped)
        run: |
          curl -H "Content-Type: application/json" -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{
            "username": "Skyvoyage App",
            "embeds": [ {
              "title": "⛔ Deploy Skipped",
              "description": "Deploy was skipped as per commit flag.",
              "fields": [
                { "name": "Commit", "value": "${{ github.event.head_commit.message }}", "inline": true },
                { "name": "Commit By", "value": "${{ github.event.head_commit.author.name }}", "inline": true },
                { "name": "Status", "value": "❌ Deploy Skipped", "inline": true }
              ]
            }]
          }'

  deploy_frontend:
    needs: check_commit
    if: needs.check_commit.outputs.frontend_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Install Vercel CLI
        run: |
          npm install -g vercel
      
      - name: Fix npm dependencies
        working-directory: ./frontend
        run: |
          # Update package.json to force npm to resolve dependency conflicts
          if [ -f package.json ]; then
            # Add resolutions or overrides to handle peer dependency conflicts
            jq '.overrides = {"cmdk": {"react": "^19.0.0"}}' package.json > package.json.tmp
            mv package.json.tmp package.json
            
            # Force install with legacy peer deps
            # This will be used during the local preparation, not in Vercel's build
            echo "Setting up .npmrc with legacy peer deps"
            echo "legacy-peer-deps=true" > .npmrc
          fi
  
      - name: Deploy Frontend to Vercel
        id: deploy_frontend
        working-directory: ./frontend
        run: |
          # Create .vercel directory if it doesn't exist
          mkdir -p .vercel
          # Configure project ID
          echo '{"projectId":"${{ secrets.FRONTEND_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' > .vercel/project.json
          # Ensure build happens before deploy
          npm install --legacy-peer-deps
          npm run build
          # Deploy to Vercel
          DEPLOY_URL=$(vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes --force)
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_ENV
          
      - name: Send Notification to ntfy.sh & Discord (Frontend)
        run: |
          curl -X POST "${{ secrets.NTFY_URL }}" \
            -H "Title: ✅ Frontend Deployed" \
            -H "Tags: rocket" \
            -H "Click: ${{ env.deploy_url }}" \
            -d "Commit: ${{ github.event.head_commit.message }} by ${{ github.event.head_commit.author.name }}"
  
          curl -H "Content-Type: application/json" -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{
            "username": "Skyvoyage App",
            "embeds": [{
              "title": "Frontend Deployed",
              "description": "Commit: `${{ github.event.head_commit.message }}`",
              "fields": [
                { "name": "Commit By", "value": "${{ github.event.head_commit.author.name }}", "inline": true },
                { "name": "Date", "value": "${{ github.event.head_commit.timestamp }}", "inline": true },
                { "name": "Status", "value": "[✅ Success](${{ env.deploy_url }})", "inline": true }
              ]
            }]
          }'
  
  deploy_backend:
    needs: check_commit
    if: needs.check_commit.outputs.backend_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
  
      - name: Install Vercel CLI
        run: |
          npm install -g vercel
  
      - name: Deploy Backend to Vercel
        id: deploy_backend
        working-directory: ./backend
        run: |
          # Create .vercel directory if it doesn't exist
          mkdir -p .vercel
          # Configure project ID
          echo '{"projectId":"${{ secrets.BACKEND_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' > .vercel/project.json
          # Deploy to Vercel
          DEPLOY_URL=$(vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes)
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_ENV
  
      - name: Send Notification to ntfy.sh & Discord (Backend)
        run: |
          curl -X POST "${{ secrets.NTFY_URL }}" \
            -H "Title: ✅ Backend Deployed" \
            -H "Tags: rocket" \
            -H "Click: ${{ env.deploy_url }}" \
            -d "Commit: ${{ github.event.head_commit.message }} by ${{ github.event.head_commit.author.name }}"
  
          curl -H "Content-Type: application/json" -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{
            "username": "Skyvoyage App",
            "embeds": [{
              "title": "Backend Deployed",
              "description": "Commit: `${{ github.event.head_commit.message }}`",
              "fields": [
                { "name": "Commit By", "value": "${{ github.event.head_commit.author.name }}", "inline": true },
                { "name": "Date", "value": "${{ github.event.head_commit.timestamp }}", "inline": true },
                { "name": "Status", "value": "[✅ Success](${{ env.deploy_url }})", "inline": true }
              ]
            }]
          }'
