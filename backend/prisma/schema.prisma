// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions 
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id         Int      @id @default(autoincrement())
  username   String   @db.VarChar(50)
  password   String   @db.LongText
  fullname   String?  @db.VarChar(30) @default("Admin")
  permission Permission
}

model airline {
  airlineCode  String    @id @db.VarChar(3)
  airlineName  String    @db.VarChar(50)
  aircraft     aircraft[]
  aircraftCost aircraftCost[]
  flight       flight[]
}

model aircraft {
  aircraftId       String        @id @db.VarChar(13)
  ownerAirlineCode String        @db.VarChar(3)
  model            String        @db.VarChar(10)
  airline          airline       @relation(fields: [ownerAirlineCode], references: [airlineCode])
  flights          flight[]
}

model aircraftCost {
  model            String   @db.VarChar(10)
  ownerAirlineCode String   @db.VarChar(3)
  costPerMile      Float
  airline          airline  @relation(fields: [ownerAirlineCode], references: [airlineCode])
  @@id([model, ownerAirlineCode])
}

model airport {
  airportCode      String   @id @db.VarChar(4)
  name             String   @db.VarChar(100)
  country          String   @db.VarChar(100)
  city             String   @db.VarChar(100)
  timezone         String   @db.VarChar(30)
  latitude         Float?
  longitude        Float?
  altitude         Int?
  departureFlights flight[] @relation("departAirport")
  arrivalFlights   flight[] @relation("arriveAirport")
}

model booking {
  bookingId         String           @id @db.VarChar(36)
  bookingDate       DateTime         @default(now()) @db.DateTime(3)
  status            BookingStatus    @default(UNPAID)
  userId            String           @db.VarChar(36)
  user              user             @relation(fields: [userId], references: [uuid])
  bookingFlights    booking_flight[]
  passengerBookings passenger_booking[]
  payment           payment?
  tickets           ticket[]
}

model booking_flight {
  bookingId String  @db.VarChar(36)
  flightId  String  @db.VarChar(36)
  booking   booking @relation(fields: [bookingId], references: [bookingId])
  flight    flight  @relation(fields: [flightId], references: [flightId])
  @@id([bookingId, flightId])
}

model flight {
  flightId        String               @id @db.VarChar(36)
  flightNum       String               @db.VarChar(10)
  departAirportId String               @db.VarChar(4)
  arriveAirportId String               @db.VarChar(4)
  aircraftId      String               @db.VarChar(13)
  airlineCode     String               @db.VarChar(3)
  airline         airline              @relation(fields: [airlineCode], references: [airlineCode])
  aircraft        aircraft             @relation(fields: [aircraftId], references: [aircraftId])
  departAirport   airport              @relation("departAirport", fields: [departAirportId], references: [airportCode])
  arriveAirport   airport              @relation("arriveAirport", fields: [arriveAirportId], references: [airportCode])
  bookings        booking_flight[]
  operations      flightOperate[]
  seats           seat[]
  tickets         ticket[]
  transitsFrom    transit[]            @relation("flightFrom")
  transitsTo      transit[]            @relation("flightTo")
  @@unique([flightNum, airlineCode])
}

model flightOperate {
  flightId         String        @db.VarChar(36)
  departureGate    String        @db.VarChar(5)
  departureTime    DateTime      @db.DateTime(3)
  arrivalTime      DateTime      @db.DateTime(3)
  flight           flight        @relation(fields: [flightId], references: [flightId])
  @@id([flightId, departureTime])
}

model passenger {
  passportNum      String   @id @db.VarChar(9)
  passportCountry  String   @db.VarChar(30)
  passportExpiry   DateTime @db.DateTime(3)
  firstName        String   @db.VarChar(30)
  lastName         String   @db.VarChar(30)
  dateOfBirth      DateTime @db.DateTime(3)
  nationality      String   @db.VarChar(100)
  ageRange         AgeRange
  userId           String   @db.VarChar(36)
  user             user     @relation(fields: [userId], references: [uuid])
  bookings         passenger_booking[]
  tickets          ticket[]
}

model passenger_booking {
  bookingId   String    @db.VarChar(36)
  passportNum String    @db.VarChar(9)
  booking     booking   @relation(fields: [bookingId], references: [bookingId])
  passenger   passenger @relation(fields: [passportNum], references: [passportNum])
  @@id([bookingId, passportNum])
}

model payment {
  paymentId   String   @id @db.VarChar(36)
  amount      Float    @default(0)
  method      String   @db.VarChar(30)
  paymentDate DateTime @default(now()) @db.DateTime(3)
  bookingId   String   @unique @db.VarChar(36)
  booking     booking  @relation(fields: [bookingId], references: [bookingId])
}

model seat {
  seatNum   String   @db.VarChar(4)
  row       Int      @default(1)
  class     Class    @default(Y)
  price     Float    @default(0)
  reserved  Boolean  @default(false)
  features  String   @db.MediumText
  floor     Int      @default(1)
  flightId  String   @db.VarChar(36)
  flight    flight   @relation(fields: [flightId], references: [flightId])
  tickets   ticket[]
  @@id([flightId, seatNum])
}

model ticket {
  ticketNum             String        @id @db.VarChar(13)
  farePackage           FarePackage   @default(STANDARD)
  baggageAllowanceWeight Int         @default(0)
  baggageAllowancePrice  Float       @default(0)
  mealSelection         String        @db.VarChar(10)
  mealPrice             Float         @default(0)
  ticketPrice           Float         @default(0)
  bookingId             String        @db.VarChar(36)
  flightId              String        @db.VarChar(36)
  passportNum           String        @db.VarChar(9)
  seatNum               String        @db.VarChar(4)
  booking               booking       @relation(fields: [bookingId], references: [bookingId])
  flight                flight        @relation(fields: [flightId], references: [flightId])
  passenger             passenger     @relation(fields: [passportNum], references: [passportNum])
  seat                  seat          @relation(fields: [flightId, seatNum], references: [flightId, seatNum])
}

model transit {
  transitTime DateTime @db.DateTime(3)
  flightFrom  String   @db.VarChar(36)
  flightTo    String   @db.VarChar(36)
  from        flight   @relation("flightFrom", fields: [flightFrom], references: [flightId])
  to          flight   @relation("flightTo", fields: [flightTo], references: [flightId])
  @@id([transitTime, flightFrom, flightTo])
}

model user {
  uuid         String     @id @db.VarChar(36) @default(uuid())
  password     String     @db.LongText
  firstname    String     @db.VarChar(50)
  lastname     String     @db.VarChar(50)
  email        String     @db.VarChar(50)
  phone        String     @db.VarChar(15)
  registerDate DateTime   @default(now()) @db.DateTime(3)
  bookings     booking[]
  passengers   passenger[]
}

enum Permission {
  SUPER
  DATA_ENTRY
}

enum BookingStatus {
  PAID
  UNPAID
  CANCELLED
}

enum AgeRange {
  Adult
  Children
  Infant
}

enum Class {
  F
  C
  Y
  W
}

enum FarePackage {
  SUPER_SAVER
  SAVER
  STANDARD
  FLEXI
  FULL_FLEX
}