// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid          String     @id @default(uuid())
  password      String?
  firstname     String?
  lastname      String?
  email         String?    @unique
  phone         String?
  registerDate  DateTime?  @default(now())
  passengers    Passenger[]
  bookings      Booking[]
}

model Admin {
  id          Int        @id
  username    String?    @unique
  password    String?
  fullname    String?
  permission  Permission
}

model Aircraft {
  aircraftId       String    @id
  ownerAirlineCode String
  model           String?
  costPerMile      Float
  firstClassCap    Int
  businessClassCap Int
  economyClassCap  Int
  premiumClassCap  Int
  flights         Flight[]
  ownerAirline    Airline   @relation(fields: [ownerAirlineCode], references: [airlineCode])
}

model Airline {
  airlineCode String    @id
  name        String?
  aircrafts   Aircraft[]
  flights     Flight[]
}

model Airport {
  airportCode      String    @id
  name             String
  country          String
  city             String
  timezone         String
  latitude         Float
  longitude        Float
  altitude         Int
  departingFlights Flight[] @relation(name: "DepartAirportRelation")
  arrivingFlights  Flight[] @relation(name: "ArriveAirportRelation")
}

model Booking {
  bookingId            String          @id
  userId               String
  adultPassengers      Int?
  childPassengers      Int?
  infantPassengers     Int?
  bookingDate          DateTime
  status              BookingStatus
  flights             BookingFlight[]
  passengerBookings   PassengerBooking[]
  tickets             Ticket[]
  payments            Payment[]
  user               User? @relation(fields: [userId], references: [uuid])
}

model BookingFlight {
  bookingId  String
  flightId   String
  booking    Booking @relation(fields: [bookingId], references: [bookingId])
  flight     Flight  @relation(fields: [flightId], references: [flightId])
  @@id([bookingId, flightId])
}

model Flight {
  flightId         String        @id @default(uuid())
  flightNum        String
  callsign         String
  airlineCode      String
  aircraftId       String
  departAirportId  String
  arriveAirportId  String
  departureTime    DateTime
  arrivalTime      DateTime?
  bookings        BookingFlight[]
  seats           Seat[]
  tickets         Ticket[]
  aircraft        Aircraft  @relation(fields: [aircraftId], references: [aircraftId])
  departAirport   Airport   @relation(name: "DepartAirportRelation", fields: [departAirportId], references: [airportCode])
  arriveAirport   Airport   @relation(name: "ArriveAirportRelation", fields: [arriveAirportId], references: [airportCode])
  airline         Airline   @relation(fields: [airlineCode], references: [airlineCode])
  previousTransit Transit[] @relation(name: "previous")
  nextTransit     Transit[] @relation(name: "next")
  
  @@unique([flightNum, departureTime])
}

model Passenger {
  passportNum        String @id
  passportCountry    String?
  passportExpiry     DateTime?
  firstName          String?
  lastName           String?
  dateOfBirth        DateTime?
  nationality        String?
  userId             String?
  bookings           PassengerBooking[]
  tickets            Ticket[]
  user               User?     @relation(fields: [userId], references: [uuid])
}

model PassengerBooking {
  bookingId   String
  passportNum String
  booking     Booking     @relation(fields: [bookingId], references: [bookingId])
  passenger   Passenger   @relation(fields: [passportNum], references: [passportNum])
  @@id([bookingId, passportNum])
}

model Payment {
  paymentId     Int       @id
  bookingId     String
  amount        Float?
  method        String?
  paymentDate   DateTime?
  booking       Booking    @relation(fields: [bookingId], references: [bookingId])
}

model Seat {
  seatNum    String
  row        Int
  class      SeatClass
  flightId   String
  price      Float
  reserved   ReservedStatus
  features   String
  floor      Int
  flight     Flight  @relation(fields: [flightId], references: [flightId])
  tickets    Ticket[]
  
  @@id([flightId, seatNum])
}

model Ticket {
  ticketNum              String   @id
  bookingId              String
  flightId               String
  passportNum            String
  seatNum                String
  farePackage            FarePackage?
  baggageAllowanceWeight Int?
  baggageAllowancePrice  Float?
  mealSelection          String?
  mealPrice              Float?
  ticketPrice            Float
  status                 TicketStatus
  booking                Booking        @relation(fields: [bookingId], references: [bookingId])
  flight                 Flight         @relation(fields: [flightId], references: [flightId])
  passenger              Passenger      @relation(fields: [passportNum], references: [passportNum])
  seat                   Seat           @relation(fields: [flightId, seatNum], references: [flightId, seatNum])
}

model Transit {
  airportId      String
  transitTime    DateTime
  duration       Int
  flightFrom     String
  flightTo       String
  previousFlight Flight   @relation(name: "previous", fields: [flightFrom], references: [flightId])
  nextFlight     Flight   @relation(name: "next", fields: [flightTo], references: [flightId])
  
  @@id([flightFrom, flightTo])
}

// Enums

enum Permission {
  SUPER
  DATA_ENTRY
}

enum BookingStatus {
  PAID
  UNPAID
  CANCELLED
}

enum SeatClass {
  F
  C
  Y
  W
}

enum ReservedStatus {
  YES
  NO
  MAYBE
}

enum FarePackage {
  SUPER_SAVER
  SAVER
  STANDARD
  FLEXI
  FULL_FLEX
}

enum TicketStatus {
  PAID
  CANCELLED
}
