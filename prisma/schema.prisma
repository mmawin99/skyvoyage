// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions 
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id         Int      @id @default(autoincrement())
  username   String   @unique @db.VarChar(40)
  password   String   @db.LongText
  fullname   String?  @db.VarChar(30)
  permission Permission
}

model airline {
  airlineCode String     @id @db.VarChar(3)
  airlineName String     @db.VarChar(50)
  aircraft     aircraft[]
  aircraftCost aircraftCost[]
  flight       flight[]
}

model aircraft {
  aircraftId       String        @id @db.VarChar(13)
  ownerAirlineCode String        @db.VarChar(3)
  model            String        @db.VarChar(10)
  seatMapId        String        @db.VarChar(32)
  airline          airline       @relation(fields: [ownerAirlineCode], references: [airlineCode])
  seatmap          seatmap_info  @relation(fields: [seatMapId], references: [seatMapId]) 
  flightOperate    flightOperate[]
}

model aircraftCost {
  model            String   @db.VarChar(10)
  ownerAirlineCode String   @db.VarChar(3)
  costPerMile      Float
  airline          airline  @relation(fields: [ownerAirlineCode], references: [airlineCode])

  @@id([model, ownerAirlineCode])
}

model airport {
  airportCode String    @id @db.VarChar(4)
  name        String    @db.VarChar(100)
  country     String    @db.VarChar(100)
  city        String    @db.VarChar(100)
  timezone    String    @db.VarChar(30)
  latitude    Float?
  longitude   Float?
  altitude    Int?

  departFlights flight[] @relation("DepartAirport")
  arriveFlights flight[] @relation("ArriveAirport")
}

model booking {
  bookingId   String        @id @db.VarChar(36)
  bookingDate DateTime      @default(now()) @db.DateTime(3)
  status      BookingStatus @default(PAID)
  userId      String        @db.VarChar(36)
  user        user          @relation(fields: [userId], references: [uuid])
  bookingFlights booking_flight[]
  passengerBookings passenger_booking[]
  tickets     ticket[]
  payment     payment?
}

model booking_flight {
  bookingId String  @db.VarChar(36)
  flightId  String  @db.VarChar(36)
  booking   booking @relation(fields: [bookingId], references: [bookingId])
  flight    flightOperate @relation(fields: [flightId], references: [flightId])

  @@id([bookingId, flightId])
}

model flight {
  flightNum        String        @db.VarChar(10)
  airlineCode      String        @db.VarChar(3)
  departAirportId  String        @db.VarChar(4)
  arriveAirportId  String        @db.VarChar(4)
  departureTime    String        @db.VarChar(8)
  arrivalTime      String        @db.VarChar(8)
  
  airline          airline       @relation(fields: [airlineCode], references: [airlineCode])
  departAirport    airport       @relation("DepartAirport", fields: [departAirportId], references: [airportCode])
  arriveAirport    airport       @relation("ArriveAirport", fields: [arriveAirportId], references: [airportCode])
  flightOperates   flightOperate[]
  transitFrom      transit[]     @relation("FromFlight")
  transitTo        transit[]     @relation("ToFlight")

  @@id([flightNum, airlineCode])
  @@index([departAirportId])
  @@index([arriveAirportId])
}

model flightOperate {
  flightId       String      @id @db.VarChar(36)
  flightNum      String      @db.VarChar(10)
  airlineCode    String      @db.VarChar(3)
  departureTime  DateTime    @db.DateTime(3)
  arrivalTime    DateTime    @db.DateTime(3)
  departureGate  String      @db.VarChar(5)
  aircraftId     String      @db.VarChar(13)
  aircraft       aircraft    @relation(fields: [aircraftId], references: [aircraftId])
  flight         flight      @relation(fields: [flightNum, airlineCode], references: [flightNum, airlineCode])
  bookingFlights booking_flight[]
  tickets        ticket[]

  @@unique([flightNum, airlineCode, departureTime])
  @@index([flightNum, airlineCode, departureTime])
}

model passenger {
  passportNum      String    @db.VarChar(9)
  passportCountry  String    @db.VarChar(30)
  passportExpiry   DateTime  @db.DateTime(3)
  title            String    @db.VarChar(10) @default("Mr")
  firstName        String    @db.VarChar(30)
  lastName         String    @db.VarChar(30)
  dateOfBirth      DateTime  @db.DateTime(3)
  nationality      String    @db.VarChar(100)
  ageRange         AgeRange
  userId           String    @db.VarChar(36)
  user             user      @relation(fields: [userId], references: [uuid])
  passengerBookings passenger_booking[]
  tickets          ticket[]
  @@id([passportNum, userId])
  @@index([passportNum, userId])
  @@index([userId])
}

model passenger_booking {
  bookingId   String    @db.VarChar(36)
  passportNum String    @db.VarChar(9)
  userId      String    @db.VarChar(36)
  booking     booking   @relation(fields: [bookingId], references: [bookingId])
  passenger   passenger @relation(fields: [passportNum, userId], references: [passportNum, userId])

  @@id([bookingId, passportNum])
}

model payment {
  paymentId    String    @id @db.VarChar(36)
  amount       Float     @default(0)
  method       String    @db.VarChar(30)
  paymentDate  DateTime  @default(now()) @db.DateTime(3)
  bookingId    String    @unique @db.VarChar(36)
  refundedId   String?   @db.VarChar(30)
  refundedDate DateTime? @db.DateTime(3)
  refundAmount Float?    @default(0)
  booking      booking   @relation(fields: [bookingId], references: [bookingId])
}

model seatmap_info {
  seatMapId     String    @id @db.VarChar(32)
  airlineCode   String    @db.VarChar(3)
  aircraftModel String    @db.VarChar(10)
  version       String    @db.VarChar(10)
  seat          seat[]
  aircraft      aircraft[]
}

model seat {
  seatMapId String    @db.VarChar(32)
  seatId    String    @unique @db.VarChar(24)
  seatNum   String    @db.VarChar(4)
  row       Int       @default(1)
  class     SeatClass @default(Y)
  price     Float     @default(0)
  features  String    @db.MediumText
  floor     Int       @default(1)
  tickets   ticket[]
  seatmap   seatmap_info @relation(fields: [seatMapId], references: [seatMapId])
  
  @@id([seatMapId, seatId])
  @@index([seatMapId, class])
}

model ticket {
  ticketId               String          @id @db.VarChar(36)
  farePackage            FarePackage     @default(STANDARD)
  baggageAllowanceWeight Int             @default(0)
  baggageAllowancePrice  Float           @default(0)
  mealSelection          String          @db.VarChar(10)
  mealPrice              Float           @default(0)
  ticketPrice            Float           @default(0)
  bookingId              String          @db.VarChar(36)
  flightId               String          @db.VarChar(36)
  passportNum            String          @db.VarChar(9)
  userId                 String          @db.VarChar(36)
  seatId                 String          @db.VarChar(24)
  isInfant               Boolean         @default(false)

  booking                booking         @relation(fields: [bookingId], references: [bookingId])
  passenger              passenger       @relation(fields: [passportNum, userId], references: [passportNum, userId])
  flight                 flightOperate   @relation(fields: [flightId], references: [flightId])
  seat                   seat            @relation(fields: [seatId], references: [seatId])

  @@index([seatId, flightId])
  @@unique([seatId, flightId, isInfant])
}

model transit {
  flightNumFrom    String
  airlineCodeFrom  String
  flightNumTo      String
  airlineCodeTo    String

  from             flight    @relation("FromFlight", fields: [flightNumFrom, airlineCodeFrom], references: [flightNum, airlineCode])
  to               flight    @relation("ToFlight", fields: [flightNumTo, airlineCodeTo], references: [flightNum, airlineCode])

  @@id([flightNumFrom, airlineCodeFrom, flightNumTo, airlineCodeTo])
}

model user {
  uuid         String     @id @db.VarChar(36) @default(uuid())
  password     String     @db.LongText
  firstname    String     @db.VarChar(50)
  lastname     String     @db.VarChar(50)
  email        String     @unique @db.VarChar(50)
  phone        String     @db.VarChar(20)
  registerDate DateTime   @default(now()) @db.DateTime(3)
  bookings     booking[]
  passengers   passenger[]
}

enum Permission {
  SUPER
  DATA_ENTRY
  USER
}

enum BookingStatus {
  PAID
  CANCELLED
  REFUNDED
}

enum AgeRange {
  Adult
  Children
  Infant
}

enum SeatClass {
  F
  C
  Y
  W
}

enum FarePackage {
  SUPER_SAVER
  SAVER
  STANDARD
  FLEXI
  FULL_FLEX
}
